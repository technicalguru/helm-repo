# Default values for postfix.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
nameOverride: ""
fullnameOverride: ""

# $enabled - do not install anything (useful as dependency chart)
enabled: true

# $replicaCount - the number of replicas in the deployment to create
replicaCount: 1

# $image            - definition of docker image
# $image.name       - the image name
# $image.tag        - the image tag (latest)
# $image.pullPolicy - The pull policy for the image
image:
  name: technicalguru/mailserver-postfix
  tag: latest
  pullPolicy: IfNotPresent

# $additionalLabels - additional labels to attach to a pod
additionalLabels: {}
#  labelKey: labelValue

#####################
# Service settings
#####################
# $service.ipFamilyPolicy - The IP stack (SingleStack, RequireDualStack, PreferDualStack)
# $service.externalIPs    - the bind address of your node where services shall listen
# $service.smtpPort       - SMTP Port
# $service.pop3Port       - POP3 Port
# $service.imapPort       - IMAP Port
# $service.smtpsPort      - SMTPS Port
# $service.submissionPort - Submission Port with STARTTLS
# $service.imapsPort      - IMAPS Port
# $service.pop3sPort      - POP3S Port
# $service.relayPort      - Relay port for incoming mail scan results (from amavis)
service:
  ipFamilyPolicy: "SingleStack"
  externalIPs: 
  - "127.0.0.1"
  smtpPort: 25
  pop3Port: 110
  imapPort: 143
  smtpsPort: 465
  submissionPort: 587
  imapsPort: 993
  pop3sPort: 995
  relayPort: 10025

# $resources - additional resource requirements
resources: {}

# $affinity.enabled   - whether node affinity shall be specified
# $affinity.nodeLabel - the key of the node label for affinity stickiness
# $affinity.nodeValues - the node label values the pod is running on (dev, uat, prod)
affinity:
  enabled: true
  nodeLabel: "mailserver/environment"
  nodeValues: 
  - "dev"

#####################
# Database settings
#####################
# $dbHostname - the database host
# $dbName     - the database instance name
# $dbUser     - the database user to use
# $dbPassword - the password of the database user to use
# $dbSetupPassword - the root password for setup
dbHostname: "mariadb"
dbName: "mail"
dbUser: "postfix"
dbPassword: "postfix"
dbSetupPassword: "password"


#####################
# Mail settings
#####################
# $defaultDomain           - default mail domain
# $serverName              - hostname to be used for HELO greeting
# $origin                  - default origin of mails, usually default mail domain
# $amavisHostname          - name of relay host for Amavis mail scanning (optional)
# $amavisPort              - relay port for Amavis mail scanning
# $enableDkim              - whether to enable DKIM signing
# $dkimHostname            - name of milter host for DKIM signing
# $dkimPort                - milter port for DKIM signing 
# $tlsCertificatePath      - directory where TLS certificate files are stored
# $tlsCAPath               - directory where trusted CA certificates are stored
# $tlsAdminEmail           - e-mail of admin to be informed when TLS certificate is about to expire
# ==> The TLS certificate values shall not be set in your values file directly but given as arguments to the HELM command:
# ==> e.g. --set-file tlsCertificateChain=/path/to/fullchain.pem --set-file tlsCertificate=/path/to/cert.pem --set-file tlsKey=/path/to/privkey.pem
# $tlsCertificateChain     - TLS certificate chain (NOT base64 encoded)
# $tlsCertificate:         - TLS certificate (NOT base64 encoded)
# $tlsKey                  - TLS key (NOT base64 encoded)
defaultDomain: ""
serverName: ""
origin: ""
amavisHostname: "amavis"
amavisPort: "10024"
enableDkim: false
dkimHostname: "opendkim"
dkimPort: "41001"
enableUtf8: "yes"
tlsCertificatePath: "/var/certificate"
tlsCAPath: "/etc/ssl/certs"
tlsAdminEmail: ""
tlsCertificateChain: ""
tlsCertificate: ""
tlsKey: ""

###############################
# VolumeClaims to mount
###############################
volumeClaims:
  mailboxes: "postfix-mailboxes"
  spool: "postfix-spool"

#######################################
# Security Context to add at pod level
#######################################
securityContext: {}

###########################
# Additional customization 
###########################
# $configfiles - list of config file definitions
# $configfiles[].name - unique name for config definition
# $configfiles[].mountPath - path of file in pod to mount at
# $configfiles[].content - the config file content
# ATTENTION: You better pass the content with command line arguments to HELM:
#       --set-file "configFiles[0].content=/path/to/file" (quotes required)
configFiles: []
#- name: example1
#  mountPath: /etc/postfix/x10-example.cf
#  content: "content of file"
#- name: example2
#  mountPath: /etc/postfix/x20-example.cf
#  content: "content of file"

# $additionalTemplateSpec  - Add more deployment template specification at this value
# $additionalPodSpec       - Add more pod specification at this value
# $additionalContainerSpec - Add more container specification at this value
additionalTemplateSpec: {}
additionalPodSpec: {}
additionalContainerSpec: {}
