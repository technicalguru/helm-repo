{{- if .Values.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "postfix.fullname" . }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "postfix.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "postfix.selectorLabels" . | nindent 8 }}
        {{- if .Values.additionalLabels -}}
          {{- toYaml .Values.additionalLabels | nindent 8 }}
        {{- end }}
    {{- if .Values.additionalTemplateSpec -}}
      {{- toYaml .Values.additionalTemplateSpec | nindent 4 }}
    {{- end }}
    spec:
      {{- if .Values.affinity.enabled }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "{{ .Values.affinity.nodeLabel }}"
                operator: In
                values:
                {{- toYaml .Values.affinity.nodeValues | nindent 16 }}
      {{- end }}
      {{- if .Values.additionalPodSpec -}}
        {{- toYaml .Values.additionalPodSpec | nindent 6 }}
      {{- end }}
      {{- if .Values.securityContext }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: PF_DB_HOST
          value: "{{ include "postfix.dbHostname" . }}"
        - name: PF_DB_NAME
          value: "{{ .Values.dbName }}"
{{- if .Values.dbSecret.name }}
        - name: PF_DB_USER
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.dbSecret.name }}"
              key: "{{ .Values.dbSecret.usernameKey }}"
        - name: PF_DB_PASS
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.dbSecret.name }}"
              key: "{{ .Values.dbSecret.passwordKey }}"
        - name: PF_SETUP_PASS
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.dbSecret.name }}"
              key: "{{ .Values.dbSecret.setupPasswordKey }}"
{{- else }}
        - name: PF_DB_USER
          value: "{{ .Values.dbUser }}"
        - name: PF_DB_PASS
          value: "{{ .Values.dbPassword }}"
        - name: PF_SETUP_PASS
          value: "{{ .Values.dbSetupPassword }}"
{{- end }}
        - name: PF_MYDOMAIN
          value: "{{ .Values.defaultDomain }}"
        - name: PF_MYHOSTNAME
          value: "{{ .Values.serverName }}"
        - name: PF_MYORIGIN
          value: "{{ .Values.origin }}"
        - name: PF_AMAVIS_SERVICE_NAME
          value: {{ include "postfix.amavisHostname" . }}
        - name: PF_AMAVIS_SERVICE_PORT
          value: "{{ .Values.amavisPort }}"
{{- if .Values.enableDkim }}
        - name: PF_DKIM_SERVICE_NAME
          value: {{ include "postfix.dkimHostname" . }}
        - name: PF_DKIM_SERVICE_PORT
          value: "{{ .Values.dkimPort }}"
{{- end }}
{{- if .Values.tlsCertificate }}
        - name: PF_TLS_CERT_FILE
          value: "{{ .Values.tlsCertificatePath }}/tls.crt"
        - name: PF_TLS_CERTCHAIN_FILE
          value: "{{ .Values.tlsCertificatePath }}/tls.crt"
        - name: PF_TLS_KEY_FILE
          value: "{{ .Values.tlsCertificatePath }}/tls.key"
        - name: PF_TLS_CAFILE
          value: "{{ .Values.tlsCertificatePath }}/tls.crt"
{{- end }}
        - name: PF_TLS_CAPATH
          value: "{{ .Values.tlsCAPath }}"
        - name: PF_TLS_ADMIN_EMAIL
          value: "{{ .Values.tlsAdminEmail }}"
        - name: PF_ENABLE_UTF8
          value: "{{ .Values.enableUtf8 }}"
        ports:
        - name: smtp
          containerPort: 25
        - name: pop3
          containerPort: 110
        - name: imap
          containerPort: 143
        - name: smtps
          containerPort: 465
        - name: submission
          containerPort: 587
        - name: imaps
          containerPort: 993
        - name: pop3s
          containerPort: 995
        - name: amavis
          containerPort: 10025
        volumeMounts:
        - name: mailboxes
          mountPath: /var/vmail
        - name: spool
          mountPath: /var/spool/postfix
{{- if .Values.tlsCertificate }}
        - name: certificate
          mountPath: {{ .Values.tlsCertificatePath }}
{{- end }}
{{- range .Values.configFiles }}
        - name: {{ .name }}
          mountPath: {{ .mountPath }}
          subPath: {{ base .mountPath }}
{{- end }}
        {{- if .Values.additionalContainerSpec -}}
          {{- toYaml .Values.additionalContainerSpec | nindent 8 }}
        {{- end }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
      volumes:
      - name: mailboxes
        persistentVolumeClaim:
          claimName: {{ .Values.volumeClaims.mailboxes }}
      - name: spool
        persistentVolumeClaim:
          claimName: {{ .Values.volumeClaims.spool }}
{{- if .Values.tlsCertificate }}
      - name: certificate
        secret:
          secretName: {{ template "postfix.fullname" . }}-certificate
{{- end }}
{{- range .Values.configFiles }}
      - name: {{ .name }}
        configMap:
          name: {{ include "postfix.fullname" $ }}-{{ .name }}
{{- end }}
{{- end }}

